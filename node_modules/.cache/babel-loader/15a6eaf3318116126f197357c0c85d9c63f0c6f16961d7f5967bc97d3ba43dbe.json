{"ast":null,"code":"import Prism from 'prismjs';\n\n/**\n * Custom DSL grammar for Prism\n * \n * Each key in this object (e.g. \"keyword\", \"number\", etc.)\n * corresponds to a token name. Prism wraps matched text in <span class=\"token X\">,\n * where X is the token name.  You can then color them in CSS.\n */\nPrism.languages['my-dsl'] = {\n  // Single-line comments (// ...)\n  'comment': {\n    pattern: /\\/\\/.*/,\n    greedy: true\n  },\n  // Arrow symbol \"->\"\n  'arrow': {\n    pattern: /->/,\n    alias: 'arrow'\n  },\n  // DSL keywords & properties\n  'keyword': {\n    pattern: /\\b(?:network|device|interface|link|coordinates|power|speed|bandwidth|ip)\\b/,\n    alias: 'keyword'\n  },\n  // Device type definitions\n  'type-name': {\n    pattern: /\\b(?:pc|laptop|switch|router|server)\\b/,\n    alias: 'type'\n  },\n  // IPv4 addresses (e.g., 192.168.1.10)\n  'ip': {\n    pattern: /\\b\\d{1,3}(?:\\.\\d{1,3}){3}\\b/,\n    alias: 'ip'\n  },\n  // Numbers (integer or float)\n  'number': {\n    pattern: /\\b\\d+(?:\\.\\d+)?\\b/,\n    alias: 'number'\n  },\n  // Braces { } (we give them their own token so we can color them distinctly)\n  'brace': {\n    pattern: /[{}]/,\n    alias: 'punctuation'\n  },\n  // Parentheses or other punctuation\n  'punctuation': /[()]/,\n  // Identifiers (e.g., MyNetwork, PC0, FastEthernet0)\n  // Simple fallback for alphanumeric names not matched above\n  'identifier': {\n    pattern: /\\b[A-Za-z0-9_]+\\b/,\n    alias: 'identifier'\n  }\n};","map":{"version":3,"names":["Prism","languages","pattern","greedy","alias"],"sources":["/Users/liosa/Desktop/NEKTAR/FRONTEND/src/utils/myDsl.ts"],"sourcesContent":["import Prism from 'prismjs';\n\n/**\n * Custom DSL grammar for Prism\n * \n * Each key in this object (e.g. \"keyword\", \"number\", etc.)\n * corresponds to a token name. Prism wraps matched text in <span class=\"token X\">,\n * where X is the token name.  You can then color them in CSS.\n */\nPrism.languages['my-dsl'] = {\n  // Single-line comments (// ...)\n  'comment': {\n    pattern: /\\/\\/.*/,\n    greedy: true\n  },\n\n  // Arrow symbol \"->\"\n  'arrow': {\n    pattern: /->/,\n    alias: 'arrow'\n  },\n\n  // DSL keywords & properties\n  'keyword': {\n    pattern: /\\b(?:network|device|interface|link|coordinates|power|speed|bandwidth|ip)\\b/,\n    alias: 'keyword'\n  },\n\n  // Device type definitions\n  'type-name': {\n    pattern: /\\b(?:pc|laptop|switch|router|server)\\b/,\n    alias: 'type'\n  },\n\n  // IPv4 addresses (e.g., 192.168.1.10)\n  'ip': {\n    pattern: /\\b\\d{1,3}(?:\\.\\d{1,3}){3}\\b/,\n    alias: 'ip'\n  },\n\n  // Numbers (integer or float)\n  'number': {\n    pattern: /\\b\\d+(?:\\.\\d+)?\\b/,\n    alias: 'number'\n  },\n\n  // Braces { } (we give them their own token so we can color them distinctly)\n  'brace': {\n    pattern: /[{}]/,\n    alias: 'punctuation'\n  },\n\n  // Parentheses or other punctuation\n  'punctuation': /[()]/,\n\n  // Identifiers (e.g., MyNetwork, PC0, FastEthernet0)\n  // Simple fallback for alphanumeric names not matched above\n  'identifier': {\n    pattern: /\\b[A-Za-z0-9_]+\\b/,\n    alias: 'identifier'\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACC,SAAS,CAAC,QAAQ,CAAC,GAAG;EAC1B;EACA,SAAS,EAAE;IACTC,OAAO,EAAE,QAAQ;IACjBC,MAAM,EAAE;EACV,CAAC;EAED;EACA,OAAO,EAAE;IACPD,OAAO,EAAE,IAAI;IACbE,KAAK,EAAE;EACT,CAAC;EAED;EACA,SAAS,EAAE;IACTF,OAAO,EAAE,4EAA4E;IACrFE,KAAK,EAAE;EACT,CAAC;EAED;EACA,WAAW,EAAE;IACXF,OAAO,EAAE,wCAAwC;IACjDE,KAAK,EAAE;EACT,CAAC;EAED;EACA,IAAI,EAAE;IACJF,OAAO,EAAE,6BAA6B;IACtCE,KAAK,EAAE;EACT,CAAC;EAED;EACA,QAAQ,EAAE;IACRF,OAAO,EAAE,mBAAmB;IAC5BE,KAAK,EAAE;EACT,CAAC;EAED;EACA,OAAO,EAAE;IACPF,OAAO,EAAE,MAAM;IACfE,KAAK,EAAE;EACT,CAAC;EAED;EACA,aAAa,EAAE,MAAM;EAErB;EACA;EACA,YAAY,EAAE;IACZF,OAAO,EAAE,mBAAmB;IAC5BE,KAAK,EAAE;EACT;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}